/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.previred.api.services;

import com.previred.api.dtos.TareaDTO;
import com.previred.api.dtos.TareaResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-24T13:01:33.720141+01:00[Europe/Stockholm]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Tarea", description = "Operaciones entre las tareas")
public interface TareasApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /tareas : Actualizar una tarea
     * Actualizar una tarea
     *
     * @param tareaDTO Actualizar una tarea (required)
     * @return Operacion exitosa (status code 200)
     *         or Tarea para actualizar no encontrada (status code 404)
     */
    @Operation(
        operationId = "actualizarTarea",
        summary = "Actualizar una tarea",
        description = "Actualizar una tarea",
        tags = { "Tarea" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operacion exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TareaDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tarea para actualizar no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tareas",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TareaDTO> actualizarTarea(
        @Parameter(name = "TareaDTO", description = "Actualizar una tarea", required = true) @Valid @RequestBody TareaDTO tareaDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tarea\" : \"tarea1\", \"estadoId\" : 10, \"id\" : 10, \"usuarioId\" : 10 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tareas/{tareaId} : Buscar tarea por id
     * Buscar tarea por id
     *
     * @param tareaId Buscar tarea por id (required)
     * @return Operacion exitosa (status code 200)
     *         or Tarea no encontrada (status code 404)
     */
    @Operation(
        operationId = "buscarPorId",
        summary = "Buscar tarea por id",
        description = "Buscar tarea por id",
        tags = { "Tarea" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operacion exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TareaResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tarea no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tareas/{tareaId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TareaResponseDTO> buscarPorId(
        @Parameter(name = "tareaId", description = "Buscar tarea por id", required = true, in = ParameterIn.PATH) @PathVariable("tareaId") Long tareaId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tarea\" : \"tarea1\", \"estado\" : { \"estado\" : \"estado1\", \"id\" : 10 }, \"usuario\" : { \"password\" : \"password\", \"roles\" : \"USER\", \"name\" : \"usuario1\", \"id\" : 10, \"email\" : \"email@email.com\" }, \"id\" : 10 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /tareas : Crear nueva tarea
     * Crear nueva tarea
     *
     * @param tareaDTO Crear nueva tarea (required)
     * @return Operacion exitosa (status code 200)
     *         or Input invalido (status code 400)
     */
    @Operation(
        operationId = "crearTarea",
        summary = "Crear nueva tarea",
        description = "Crear nueva tarea",
        tags = { "Tarea" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operacion exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TareaDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Input invalido")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tareas",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TareaDTO> crearTarea(
        @Parameter(name = "TareaDTO", description = "Crear nueva tarea", required = true) @Valid @RequestBody TareaDTO tareaDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tarea\" : \"tarea1\", \"estadoId\" : 10, \"id\" : 10, \"usuarioId\" : 10 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /tareas/{tareaId} : Eliminar tarea
     * Eliminar tarea
     *
     * @param tareaId Eliminar tarea (required)
     * @return Tarea no encontrada (status code 400)
     */
    @Operation(
        operationId = "eliminarTarea",
        summary = "Eliminar tarea",
        description = "Eliminar tarea",
        tags = { "Tarea" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Tarea no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tareas/{tareaId}"
    )
    
    default ResponseEntity<Void> eliminarTarea(
        @Parameter(name = "tareaId", description = "Eliminar tarea", required = true, in = ParameterIn.PATH) @PathVariable("tareaId") Long tareaId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tareas/listar : Listar todas las tareas
     * Listar todas las tareas
     *
     * @return Operacion exitosa (status code 200)
     *         or Tareas no encontradas (status code 404)
     */
    @Operation(
        operationId = "listarTareas",
        summary = "Listar todas las tareas",
        description = "Listar todas las tareas",
        tags = { "Tarea" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operacion exitosa", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TareaResponseDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Tareas no encontradas")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tareas/listar",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TareaResponseDTO>> listarTareas(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"tarea\" : \"tarea1\", \"estado\" : { \"estado\" : \"estado1\", \"id\" : 10 }, \"usuario\" : { \"password\" : \"password\", \"roles\" : \"USER\", \"name\" : \"usuario1\", \"id\" : 10, \"email\" : \"email@email.com\" }, \"id\" : 10 }, { \"tarea\" : \"tarea1\", \"estado\" : { \"estado\" : \"estado1\", \"id\" : 10 }, \"usuario\" : { \"password\" : \"password\", \"roles\" : \"USER\", \"name\" : \"usuario1\", \"id\" : 10, \"email\" : \"email@email.com\" }, \"id\" : 10 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
